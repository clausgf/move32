/**
 * Move32 - Naze32 for robotics
 * High-Level HAL for board support
 * Copyright (c) 2017 clausgf. For further info, refer to https://github.com/clausgf/move32
 */


#ifndef MOVE32_BOARD_H
#define MOVE32_BOARD_H


#include <stdint.h>
#include <stdbool.h>

#include "stm32f1xx_hal.h"


// **************************************************************************
// Handles for accessing the peripherals via STHAL
// **************************************************************************

extern ADC_HandleTypeDef hadc1;
extern I2C_HandleTypeDef hi2c2;
extern SPI_HandleTypeDef hspi2;
extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_tx;
extern DMA_HandleTypeDef hdma_usart1_rx;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;

extern UART_HandleTypeDef *syscall_UART_handle_ptr;

// **************************************************************************
// Timer initialization
// **************************************************************************

/**
 * Basic initialization for a timer running at 1 MHz from the system clock.
 * @param hTimer STHAL handle for the timer, e.g. htim1
 * @param timerInstancePtr Pointer to the timer's register block, e.g. TIM1
 * @param period Period (in us) for timer resets, e.g. 20000 for 20 ms
 */
extern void timerInit(TIM_HandleTypeDef *hTimer,
                      TIM_TypeDef *timerInstancePtr,
                      uint16_t period);

/**
 * Configure a timer channel for PWM output. GPIO pins and the basic
 * timer must be initialized separately (@see timerInit).
 * @param hTimer STHAL handle for the timer, e.g. htim1
 * @param timerChannel STHAL constant for the timer channel
 *        (which is *not* the channel number),
 *        e.g. TIM_CHANNEL_1
 * @param value Pulse length in timer ticks (here: us),
 *        e.g. 1500 for 1.5 ms pulse length
 */
extern void pwmInit(TIM_HandleTypeDef *hTimer,
                    uint32_t timerChannel,
                    uint16_t value);

/**
 * Configure a timer channel for input capture. GPIO pin and the basic
 * timer must be initialized separately (@see imterInit).
 * @param handle STHAL handle for the timer, e.g. htim1
 * @param timerChannel STHAL constant for the timer channel
 *        (which is *not* the channel number),
 *        e.g. TIM_CHANNEL_1
 * @param polarity Edge to trigger an input capture event,
 *        i.e. TIM_ICPOLARITY_RISING, TIM_ICPOLARITY_FALLING or TIM_ICPOLARITY_BOTHEDGE
 */
extern void icInit(TIM_HandleTypeDef *handle,
                   uint32_t timerChannel,
                   uint32_t polarity);


// **************************************************************************
// Serial communication via UART
// **************************************************************************

#define SERIAL_RX_MAX 40

/**
 * Initialize serial communication via UART, include pins and peripheral clock
 */
extern void serialInit(void);

/**
 * Return a line received from the serial UART interface or NULL
 * if not complete line was received. New data can be received
 * only after the application has fetched the previous data using
 * this function.
 * @return NULL or pointer to the received data
 */
extern char *serialReceive();


// **************************************************************************
// Handling of the on-board LEDs
// **************************************************************************


/**
 * Set state of LED0 (pin PB4)
 * @param state GPIO_PIN_SET or GPIO_PIN_RESET
 */
extern void led0Set(GPIO_PinState state);

/**
 * Toggle state of LED0 (pin PB4)
 */
extern void led0Toggle();

/**
 * Set state of LED1 (pin PB3)
 * @param state GPIO_PIN_SET or GPIO_PIN_RESET)
 */
extern void led1Set(GPIO_PinState state);

/**
 * Toggle state of LED1 (pin PB3)
 */
extern void led1Toggle();

/**
 * Set state of external beeper output (pin PA12)
 * @param state GPIO_PIN_SET or GPIO_PIN_RESET
 */
extern void beeperSet(GPIO_PinState state);

/**
 * Toggle state of external beeper output (pin PA12)
 */
extern void beeperToggle();

/**
 * Initialize the two on-board LEDs and the BEEP output, including GPIOs.
 */
extern void ledInit();


// **************************************************************************
// System initialization and error handling generated by CubeMX
// **************************************************************************

extern void SystemClock_Config(void);

extern void _Error_Handler(char *file, int line);

/**
 * Initializes the board by calling @see SystemClock_Config,
 * @see ledInit,
 * @see serialInit
 */
extern void boardInit();


// **************************************************************************

#endif //MOVE32_BOARD_H
